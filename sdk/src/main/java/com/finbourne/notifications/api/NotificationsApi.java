/*
 * FINBOURNE Notifications API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.316
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.notifications.api;

import com.finbourne.notifications.ApiCallback;
import com.finbourne.notifications.ApiClient;
import com.finbourne.notifications.ApiException;
import com.finbourne.notifications.ApiResponse;
import com.finbourne.notifications.Configuration;
import com.finbourne.notifications.Pair;
import com.finbourne.notifications.ProgressRequestBody;
import com.finbourne.notifications.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.notifications.model.CreateEmailNotification;
import com.finbourne.notifications.model.CreateSmsNotification;
import com.finbourne.notifications.model.CreateWebhookNotification;
import com.finbourne.notifications.model.LusidProblemDetails;
import com.finbourne.notifications.model.LusidValidationProblemDetails;
import com.finbourne.notifications.model.Notification;
import com.finbourne.notifications.model.ResourceListOfNotification;
import com.finbourne.notifications.model.UpdateEmailNotification;
import com.finbourne.notifications.model.UpdateSmsNotification;
import com.finbourne.notifications.model.UpdateWebhookNotification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationsApi {
    private ApiClient localVarApiClient;
    public NotificationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createEmailNotification
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param createEmailNotification The data to create a email notification (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmailNotificationCall(String scope, String code, CreateEmailNotification createEmailNotification, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createEmailNotification;

        // create path and map variables
        String localVarPath = "/api/subscriptions/{scope}/{code}/notifications/email"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.316");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmailNotificationValidateBeforeCall(String scope, String code, CreateEmailNotification createEmailNotification, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling createEmailNotification(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling createEmailNotification(Async)");
        }
        
        // verify the required parameter 'createEmailNotification' is set
        if (createEmailNotification == null) {
            throw new ApiException("Missing the required parameter 'createEmailNotification' when calling createEmailNotification(Async)");
        }
        

        okhttp3.Call localVarCall = createEmailNotificationCall(scope, code, createEmailNotification, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] CreateEmailNotification: Add an email notification to a subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param createEmailNotification The data to create a email notification (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Notification createEmailNotification(String scope, String code, CreateEmailNotification createEmailNotification) throws ApiException {
        ApiResponse<Notification> localVarResp = createEmailNotificationWithHttpInfo(scope, code, createEmailNotification);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] CreateEmailNotification: Add an email notification to a subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param createEmailNotification The data to create a email notification (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> createEmailNotificationWithHttpInfo(String scope, String code, CreateEmailNotification createEmailNotification) throws ApiException {
        okhttp3.Call localVarCall = createEmailNotificationValidateBeforeCall(scope, code, createEmailNotification, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] CreateEmailNotification: Add an email notification to a subscription. (asynchronously)
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param createEmailNotification The data to create a email notification (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmailNotificationAsync(String scope, String code, CreateEmailNotification createEmailNotification, final ApiCallback<Notification> _callback) throws ApiException {
        okhttp3.Call localVarCall = createEmailNotificationValidateBeforeCall(scope, code, createEmailNotification, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSmsNotification
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param createSmsNotification The data to create an SMS notification (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSmsNotificationCall(String scope, String code, CreateSmsNotification createSmsNotification, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createSmsNotification;

        // create path and map variables
        String localVarPath = "/api/subscriptions/{scope}/{code}/notifications/sms"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.316");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSmsNotificationValidateBeforeCall(String scope, String code, CreateSmsNotification createSmsNotification, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling createSmsNotification(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling createSmsNotification(Async)");
        }
        
        // verify the required parameter 'createSmsNotification' is set
        if (createSmsNotification == null) {
            throw new ApiException("Missing the required parameter 'createSmsNotification' when calling createSmsNotification(Async)");
        }
        

        okhttp3.Call localVarCall = createSmsNotificationCall(scope, code, createSmsNotification, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] CreateSmsNotification: Add an SMS notification to a subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param createSmsNotification The data to create an SMS notification (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Notification createSmsNotification(String scope, String code, CreateSmsNotification createSmsNotification) throws ApiException {
        ApiResponse<Notification> localVarResp = createSmsNotificationWithHttpInfo(scope, code, createSmsNotification);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] CreateSmsNotification: Add an SMS notification to a subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param createSmsNotification The data to create an SMS notification (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> createSmsNotificationWithHttpInfo(String scope, String code, CreateSmsNotification createSmsNotification) throws ApiException {
        okhttp3.Call localVarCall = createSmsNotificationValidateBeforeCall(scope, code, createSmsNotification, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] CreateSmsNotification: Add an SMS notification to a subscription. (asynchronously)
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param createSmsNotification The data to create an SMS notification (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSmsNotificationAsync(String scope, String code, CreateSmsNotification createSmsNotification, final ApiCallback<Notification> _callback) throws ApiException {
        okhttp3.Call localVarCall = createSmsNotificationValidateBeforeCall(scope, code, createSmsNotification, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWebhookNotification
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param createWebhookNotification The data to create a webhook notification (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebhookNotificationCall(String scope, String code, CreateWebhookNotification createWebhookNotification, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createWebhookNotification;

        // create path and map variables
        String localVarPath = "/api/subscriptions/{scope}/{code}/notifications/webhook"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.316");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebhookNotificationValidateBeforeCall(String scope, String code, CreateWebhookNotification createWebhookNotification, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling createWebhookNotification(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling createWebhookNotification(Async)");
        }
        
        // verify the required parameter 'createWebhookNotification' is set
        if (createWebhookNotification == null) {
            throw new ApiException("Missing the required parameter 'createWebhookNotification' when calling createWebhookNotification(Async)");
        }
        

        okhttp3.Call localVarCall = createWebhookNotificationCall(scope, code, createWebhookNotification, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] CreateWebhookNotification: Add a Webhook notification to a subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param createWebhookNotification The data to create a webhook notification (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Notification createWebhookNotification(String scope, String code, CreateWebhookNotification createWebhookNotification) throws ApiException {
        ApiResponse<Notification> localVarResp = createWebhookNotificationWithHttpInfo(scope, code, createWebhookNotification);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] CreateWebhookNotification: Add a Webhook notification to a subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param createWebhookNotification The data to create a webhook notification (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> createWebhookNotificationWithHttpInfo(String scope, String code, CreateWebhookNotification createWebhookNotification) throws ApiException {
        okhttp3.Call localVarCall = createWebhookNotificationValidateBeforeCall(scope, code, createWebhookNotification, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] CreateWebhookNotification: Add a Webhook notification to a subscription. (asynchronously)
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param createWebhookNotification The data to create a webhook notification (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebhookNotificationAsync(String scope, String code, CreateWebhookNotification createWebhookNotification, final ApiCallback<Notification> _callback) throws ApiException {
        okhttp3.Call localVarCall = createWebhookNotificationValidateBeforeCall(scope, code, createWebhookNotification, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNotification
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNotificationCall(String scope, String code, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/subscriptions/{scope}/{code}/notifications/{id}"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.316");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNotificationValidateBeforeCall(String scope, String code, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteNotification(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteNotification(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteNotification(Async)");
        }
        

        okhttp3.Call localVarCall = deleteNotificationCall(scope, code, id, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] DeleteNotification: Delete a notification for a given subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNotification(String scope, String code, String id) throws ApiException {
        deleteNotificationWithHttpInfo(scope, code, id);
    }

    /**
     * [EXPERIMENTAL] DeleteNotification: Delete a notification for a given subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNotificationWithHttpInfo(String scope, String code, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteNotificationValidateBeforeCall(scope, code, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * [EXPERIMENTAL] DeleteNotification: Delete a notification for a given subscription. (asynchronously)
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNotificationAsync(String scope, String code, String id, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = deleteNotificationValidateBeforeCall(scope, code, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNotification
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationCall(String scope, String code, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/subscriptions/{scope}/{code}/notifications/{id}"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.316");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNotificationValidateBeforeCall(String scope, String code, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getNotification(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getNotification(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNotification(Async)");
        }
        

        okhttp3.Call localVarCall = getNotificationCall(scope, code, id, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] GetNotification: Get a notification on a subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Notification getNotification(String scope, String code, String id) throws ApiException {
        ApiResponse<Notification> localVarResp = getNotificationWithHttpInfo(scope, code, id);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] GetNotification: Get a notification on a subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> getNotificationWithHttpInfo(String scope, String code, String id) throws ApiException {
        okhttp3.Call localVarCall = getNotificationValidateBeforeCall(scope, code, id, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] GetNotification: Get a notification on a subscription. (asynchronously)
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationAsync(String scope, String code, String id, final ApiCallback<Notification> _callback) throws ApiException {
        okhttp3.Call localVarCall = getNotificationValidateBeforeCall(scope, code, id, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNotifications
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notifications exists with the provided filter(s) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNotificationsCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/subscriptions/{scope}/{code}/notifications"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.316");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNotificationsValidateBeforeCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listNotifications(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling listNotifications(Async)");
        }
        

        okhttp3.Call localVarCall = listNotificationsCall(scope, code, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] ListNotifications: List all notifications on a subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @return ResourceListOfNotification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notifications exists with the provided filter(s) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListOfNotification listNotifications(String scope, String code) throws ApiException {
        ApiResponse<ResourceListOfNotification> localVarResp = listNotificationsWithHttpInfo(scope, code);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] ListNotifications: List all notifications on a subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @return ApiResponse&lt;ResourceListOfNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notifications exists with the provided filter(s) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListOfNotification> listNotificationsWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = listNotificationsValidateBeforeCall(scope, code, null);
        Type localVarReturnType = new TypeToken<ResourceListOfNotification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] ListNotifications: List all notifications on a subscription. (asynchronously)
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notifications exists with the provided filter(s) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNotificationsAsync(String scope, String code, final ApiCallback<ResourceListOfNotification> _callback) throws ApiException {
        okhttp3.Call localVarCall = listNotificationsValidateBeforeCall(scope, code, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfNotification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEmailNotification
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param updateEmailNotification The data to update a notification (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmailNotificationCall(String scope, String code, String id, UpdateEmailNotification updateEmailNotification, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateEmailNotification;

        // create path and map variables
        String localVarPath = "/api/subscriptions/{scope}/{code}/notifications/email/{id}"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.316");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmailNotificationValidateBeforeCall(String scope, String code, String id, UpdateEmailNotification updateEmailNotification, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateEmailNotification(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateEmailNotification(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEmailNotification(Async)");
        }
        
        // verify the required parameter 'updateEmailNotification' is set
        if (updateEmailNotification == null) {
            throw new ApiException("Missing the required parameter 'updateEmailNotification' when calling updateEmailNotification(Async)");
        }
        

        okhttp3.Call localVarCall = updateEmailNotificationCall(scope, code, id, updateEmailNotification, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] UpdateEmailNotification: Update an email notification for a given subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param updateEmailNotification The data to update a notification (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Notification updateEmailNotification(String scope, String code, String id, UpdateEmailNotification updateEmailNotification) throws ApiException {
        ApiResponse<Notification> localVarResp = updateEmailNotificationWithHttpInfo(scope, code, id, updateEmailNotification);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] UpdateEmailNotification: Update an email notification for a given subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param updateEmailNotification The data to update a notification (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> updateEmailNotificationWithHttpInfo(String scope, String code, String id, UpdateEmailNotification updateEmailNotification) throws ApiException {
        okhttp3.Call localVarCall = updateEmailNotificationValidateBeforeCall(scope, code, id, updateEmailNotification, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] UpdateEmailNotification: Update an email notification for a given subscription. (asynchronously)
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param updateEmailNotification The data to update a notification (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmailNotificationAsync(String scope, String code, String id, UpdateEmailNotification updateEmailNotification, final ApiCallback<Notification> _callback) throws ApiException {
        okhttp3.Call localVarCall = updateEmailNotificationValidateBeforeCall(scope, code, id, updateEmailNotification, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSmsNotification
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param updateSmsNotification The data to update a notification (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSmsNotificationCall(String scope, String code, String id, UpdateSmsNotification updateSmsNotification, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateSmsNotification;

        // create path and map variables
        String localVarPath = "/api/subscriptions/{scope}/{code}/notifications/sms/{id}"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.316");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSmsNotificationValidateBeforeCall(String scope, String code, String id, UpdateSmsNotification updateSmsNotification, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateSmsNotification(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateSmsNotification(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSmsNotification(Async)");
        }
        
        // verify the required parameter 'updateSmsNotification' is set
        if (updateSmsNotification == null) {
            throw new ApiException("Missing the required parameter 'updateSmsNotification' when calling updateSmsNotification(Async)");
        }
        

        okhttp3.Call localVarCall = updateSmsNotificationCall(scope, code, id, updateSmsNotification, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] UpdateSmsNotification: Update an SMS notification for a given subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param updateSmsNotification The data to update a notification (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Notification updateSmsNotification(String scope, String code, String id, UpdateSmsNotification updateSmsNotification) throws ApiException {
        ApiResponse<Notification> localVarResp = updateSmsNotificationWithHttpInfo(scope, code, id, updateSmsNotification);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] UpdateSmsNotification: Update an SMS notification for a given subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param updateSmsNotification The data to update a notification (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> updateSmsNotificationWithHttpInfo(String scope, String code, String id, UpdateSmsNotification updateSmsNotification) throws ApiException {
        okhttp3.Call localVarCall = updateSmsNotificationValidateBeforeCall(scope, code, id, updateSmsNotification, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] UpdateSmsNotification: Update an SMS notification for a given subscription. (asynchronously)
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param updateSmsNotification The data to update a notification (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSmsNotificationAsync(String scope, String code, String id, UpdateSmsNotification updateSmsNotification, final ApiCallback<Notification> _callback) throws ApiException {
        okhttp3.Call localVarCall = updateSmsNotificationValidateBeforeCall(scope, code, id, updateSmsNotification, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWebhookNotification
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param updateWebhookNotification The data to update a notification (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebhookNotificationCall(String scope, String code, String id, UpdateWebhookNotification updateWebhookNotification, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateWebhookNotification;

        // create path and map variables
        String localVarPath = "/api/subscriptions/{scope}/{code}/notifications/webhook/{id}"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.316");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebhookNotificationValidateBeforeCall(String scope, String code, String id, UpdateWebhookNotification updateWebhookNotification, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateWebhookNotification(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateWebhookNotification(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateWebhookNotification(Async)");
        }
        
        // verify the required parameter 'updateWebhookNotification' is set
        if (updateWebhookNotification == null) {
            throw new ApiException("Missing the required parameter 'updateWebhookNotification' when calling updateWebhookNotification(Async)");
        }
        

        okhttp3.Call localVarCall = updateWebhookNotificationCall(scope, code, id, updateWebhookNotification, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] UpdateWebhookNotification: Update a Webhook notification for a given subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param updateWebhookNotification The data to update a notification (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Notification updateWebhookNotification(String scope, String code, String id, UpdateWebhookNotification updateWebhookNotification) throws ApiException {
        ApiResponse<Notification> localVarResp = updateWebhookNotificationWithHttpInfo(scope, code, id, updateWebhookNotification);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] UpdateWebhookNotification: Update a Webhook notification for a given subscription.
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param updateWebhookNotification The data to update a notification (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> updateWebhookNotificationWithHttpInfo(String scope, String code, String id, UpdateWebhookNotification updateWebhookNotification) throws ApiException {
        okhttp3.Call localVarCall = updateWebhookNotificationValidateBeforeCall(scope, code, id, updateWebhookNotification, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] UpdateWebhookNotification: Update a Webhook notification for a given subscription. (asynchronously)
     * 
     * @param scope The scope that identifies a subscription (required)
     * @param code The code that identifies a subscription (required)
     * @param id The unique identifier of the notification (required)
     * @param updateWebhookNotification The data to update a notification (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No notification exists in current scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebhookNotificationAsync(String scope, String code, String id, UpdateWebhookNotification updateWebhookNotification, final ApiCallback<Notification> _callback) throws ApiException {
        okhttp3.Call localVarCall = updateWebhookNotificationValidateBeforeCall(scope, code, id, updateWebhookNotification, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
